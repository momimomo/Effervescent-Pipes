  <div id="headline">
    <h2 id="textfirstline">Bartłomiej Jodłowski</h2>
    <h3 id="textsecondline">Full-stack IT craftsman</h3>
    <div id="services">
      <h4>Providing excellent IT services since 2011.</h4>
      <h4>Designing websites in 2D & 3D!</h4>
      <h4>Ensuring highest standards of cybersecurity.</h4>
      <h5>Contact: <a href="mailto:bartek@e-vr.io">bartek@e-vr.io</a></h5>
    </div>
  </div>
  
  
  
  
  //
  
  
  
  
const lines = document.querySelectorAll('line');
const angleGroups = {};
let lineDelay = 1;
let lineDelayIncrement = 1;
let faceDelay = 2;
let faceDelayIncrement = 1;
const angleTolerance = 0.5;

function getRoundedAngle(angle, tolerance) {
  return Math.round(angle / tolerance) * tolerance;
}

lines.forEach(line => {
  const x1 = parseFloat(line.getAttribute('x1'));
  const y1 = parseFloat(line.getAttribute('y1'));
  const x2 = parseFloat(line.getAttribute('x2'));
  const y2 = parseFloat(line.getAttribute('y2'));

  uniquePoints.add(`${x1},${y1}`);
  uniquePoints.add(`${x2},${y2}`);

  const angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;

  const roundedAngle = getRoundedAngle(angle, angleTolerance); 

  if (!angleGroups[roundedAngle]) {
    angleGroups[roundedAngle] = [];
  }
  angleGroups[roundedAngle].push(line);
});

const pointsVariables = {};
let counter = 1;

uniquePoints.forEach(point => {
  pointsVariables[`pointCoord${counter}`] = point;
  counter++;
});


const svgElement = document.querySelector('#firstsvg');
const secondline = svgContainerTwo.querySelector('#secondline');

// @media (max-width: 1920px) { :root { --svg-scale: 0.75; } }
// @media (max-width: 819px) { :root { --svg-scale: 0.5; } }
// @media (max-width: 420px) { :root { --svg-scale: 0.25; } }
// @media (max-height: 420px) { :root { --svg-scale: 0.25; } }

function updateViewportSize() {
  const viewportWidth = window.innerWidth;
  const viewportHeight = window.innerHeight;
  let translateX = '';
  let translateY = '';
  if (viewportHeight < 420) {
    translateX = `${-viewportWidth * 4 + 100}px`
    translateY = `${-viewportHeight * 4 + 100}px`
  } else if (viewportWidth < 420) {
    translateX = `${-viewportWidth * 3.5 + 8}px`
    translateY = `${-viewportHeight * 2.8}px`
  } else if (viewportWidth < 820) {
    translateX = `${-viewportWidth * 5 / 3}px`
    translateY = `${-viewportHeight * 2}px`
  } else {
    translateX = `${-viewportWidth}px`
    translateY = `${-viewportHeight * 2 / 3}px`
  }
  
  

  svgElement.style.setProperty('--translate-x', translateX);
  svgElement.style.setProperty('--translate-y', translateY);
}

updateViewportSize();

window.addEventListener('resize', updateViewportSize);

faces.forEach((faceData, index) => {
  const face = createFace(faceData.points, faceData.color, faceDelay);
  svgElement.appendChild(face);
  if ((index + 1) % 4 === 0) {
    faceDelay += faceDelayIncrement;
  }
});

Object.keys(angleGroups).forEach(angle => {
  angleGroups[angle].forEach(line => {
    const length = line.getTotalLength();
    line.style.setProperty('--line-length', length);
    line.style.animationDelay = `${lineDelay}s`;
  });
  lineDelay += lineDelayIncrement;
});

function renderServices() {
  const services = document.querySelector('#services');
  const allLines = services.querySelectorAll('h4,h5');
  let serviceLineDelay = 14;
  allLines.forEach(line => {
    line.style.animationDelay = `${serviceLineDelay}s`;
    serviceLineDelay += lineDelayIncrement;
  })
}




function getTransformedCoordinates() {
  const tesseract = document.querySelector('#tesseract');
  const tesseractRect = tesseract.getBoundingClientRect();
  const transformedX = tesseractRect.right - 0.5;
  const transformedY = tesseractRect.top + tesseractRect.height / 2;
  return { x: transformedX, y: transformedY };
}


window.setTimeout(() => {
  const { x, y } = getTransformedCoordinates();
  const viewportWidth = window.innerWidth;
  const viewportHeight = window.innerHeight;

  const x2 = Math.min(x + viewportWidth / 2, viewportWidth); // Ensure x2 is within the viewport
  const svgLineDef = `
  <?xml version="1.0"?>
  <svg width="800" height="800" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg" version="1.0">

  <g class="layertwo">
    <title>Layer 2</title>
      <g id="svg_linetwo_1" stroke="#000000" stroke-opacity="1" stroke-width="1">
        <line id="secondline" x1="${x}" x2="${x2}" y1="${y}" y2="${y}"/>
      </g>
    </g>
  </svg>`;
  const svgContainerTwo = document.querySelector('#svgContainerTwo');
  svgContainerTwo.innerHTML = svgLineDef;
  const secondline = svgContainerTwo.querySelector('#secondline');
  const length = secondline.getTotalLength();
  secondline.style.setProperty('--line-length', length);
  
  const headline = document.querySelector('#headline');
  const services = document.querySelector('#services');
  const textfirstline = headline.querySelector('#textfirstline');
  const textsecondline = headline.querySelector('#textsecondline');


  if (viewportWidth < 300) {
    textfirstline.style.top = `${y - 95}px`;
    textsecondline.style.top = `${y - 2}px`;
  } else if (viewportWidth < 450) {
    textfirstline.style.top = `${y - 65}px`;
    textsecondline.style.top = `${y - 2}px`;
  } else if (viewportWidth < 520) {
    textfirstline.style.top = `${y - 75}px`;
    textsecondline.style.top = `${y - 4}px`;
  } else if (viewportWidth < 630) {
    textfirstline.style.top = `${y - 85}px`;
    textsecondline.style.top = `${y - 6}px`;
  } else if (viewportWidth < 740) {
    textfirstline.style.top = `${y - 90}px`;
    textsecondline.style.top = `${y - 8}px`;
  } else if (viewportWidth < 860) {
    textfirstline.style.top = `${y - 95}px`;
    textsecondline.style.top = `${y - 10}px`;
    }else if (viewportWidth < 980) {
    textfirstline.style.top = `${y - 100}px`;
    textsecondline.style.top = `${y - 10}px`;
  } else if (viewportWidth < 1160) {
    textfirstline.style.top = `${y - 130}px`;
    textsecondline.style.top = `${y - 20}px`;
  } else {
    textfirstline.style.top = `${y - 160}px`;
    textsecondline.style.top = `${y - 30}px`;
  }

  if (viewportHeight < 360) {
    textfirstline.style.top = `${y - 50}px`;
    textsecondline.style.top = `${y - 2}px`;
    services.style.top = `${y + 30}px`;
  } else if (viewportHeight < 450) {
    textfirstline.style.top = `${y - 70}px`;
    textsecondline.style.top = `${y - 8}px`;
    services.style.top = `${y + 70}px`;
  } else {
    services.style.top = `${y + 120}px`;
  }
  if (viewportWidth > 450) {
    services.style.left = `${x / 2}px`;
  } else {
    services.style.left = `6px`;
  }
  renderServices()
  textfirstline.style.left = `${x}px`;
  textsecondline.style.left = `${x}px`;
}, 10000); 




//




:root {
    --viewport-width: 100vw;
    --viewport-height: 100vh;
    --svg-scale: 1;
  }

  html, body {
    height: 100%;
    width: 100vw;
    overflow: hidden;
    margin: 0;
    box-sizing: border-box
  }

  #svgContainer {
    height: 100px; /* Full viewport height */
    width: 100px; /* Full viewport width */
    overflow: visible;
  }
  
  #content-wrapper {
    display: flex;
    position: absolute;
    justify-content: center; /* Centers horizontally */
    align-items: center; /* Centers vertically */
    height: 100px; /* Full viewport height */
    width: 100px; /* Full viewport width */
    overflow: visible;
  }

  #svgContainerTwo {
    position: fixed;
  }

  svg {
    flex-shrink: 0;
  }

  @media (max-width: 1920px) {
    :root {
      --svg-scale: 0.75;
    }
  }

  @media (max-width: 819px) and (min-height: 380px) {
    :root {
      --svg-scale: 0.5;
    }
  }

  @media (max-width: 819px) and (max-height: 380px) {
    :root {
      --svg-scale: 0.4;
    }
  }
  
  @media (max-height: 420px) {
    :root {
      --svg-scale: 0.25;
    }
  }


  @media (max-width: 420px) {
    :root {
      --svg-scale: 0.25;
    }
  }
  


  body {
    margin: 0;
    overflow: hidden;
    display: block;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background: #f0f0f0;
  }

  svg {
    transform-origin: center;
  }

  h2,
  h3,
  h4,
  h5 {
    font-family: Helvetica, Arial, sans-serif;
  }

  h2,
  h3,
  h4,
  h5 {
    opacity: 0;
  }

  h2 {
    font-size: 72px;
  }

  h3 {
    font-size: 48px;
  }

  h4,
  h5 {
    font-size: 36px;
  }

  @media (max-width: 1160px) {
    h2 {
      font-size: 56px;
    }

    h3 {
      font-size: 36px;
    }

    h4,
    h5 {
      font-size: 32px;
    }

  }

  @media (max-width: 980px) {
    h2 {
      font-size: 48px;
    }

    h3 {
      font-size: 32px;
    }

    h4,
    h5 {
      font-size: 24px;
    }
  }

  @media (max-width: 860px) {
    h2 {
      font-size: 40px;
    }

    h3 {
      font-size: 28px;
    }

    h4,
    h5 {
      font-size: 24px;
    }
  }

  @media (max-height: 420px) {
    h2 {
        font-size: 28px;
      }
  
      h3 {
        font-size: 22px;
      }
  
      h4,
      h5 {
        font-size: 18px;
      }
  }

  @media (max-width: 740px) and (min-height: 370px) {
    h2 {
      font-size: 36px;
    }

    h3 {
      font-size: 26px;
    }

    h4,
    h5 {
      font-size: 22px;
    }
  }

  @media (max-width: 630px) {
    h2 {
      font-size: 32px;
    }

    h3 {
      font-size: 24px;
    }

    h4,
    h5 {
      font-size: 20px;
    }
  }

  @media (max-width: 520px) {
    h2 {
      font-size: 28px;
    }

    h3 {
      font-size: 22px;
    }

    h4,
    h5 {
      font-size: 18px;
    }
  }

  @media (max-width: 450px) {
    h2 {
      font-size: 24px;
    }

    h3 {
      font-size: 18px;
    }

    h4,
    h5 {
      font-size: 16px;
    }
  }

  @media (max-height: 320px) {
    h2 {
        font-size: 20px;
      }
  
      h3 {
        font-size: 16px;
      }
  
      h4,
      h5 {
        font-size: 12px;
      }
  }



  h4::after {
    content: '';
    display: block;
    position: absolute;
    margin: 10px auto;
    height: 1px;
    width: 50%;
    background-color: black;
  }


  #headline {
    position: absolute;
    display: block;
    width: 100vw;
    height: auto;
  }

  #services {
    position: absolute;
    display: flex;
    bottom: 10vh;
    width: auto;
    height: auto;
    margin: auto;
    flex-direction: column;
    align-items: left;
  }


  @keyframes textSlideUp {
    0% {
      transform: translate(0px, 20px);
      opacity: 0;
    }

    100% {
      transform: translate(0px, 0px);
      opacity: 1;
    }
  }

  @keyframes textSlideDown {
    0% {
      transform: translate(0px, -20px);
      opacity: 0;
    }

    100% {
      transform: translate(0px, 0px);
      opacity: 1;
    }
  }

  @keyframes textSlideRight {
    0% {
      transform: translate(-40px, 0px);
      opacity: 0;
    }

    100% {
      transform: translate(0px, 0px);
      opacity: 1;
    }
  }

  #textfirstline {
    position: absolute;
    animation: textSlideUp 1s ease-in forwards 12s;
  }

  #textsecondline {
    position: absolute;
    animation: textSlideDown 1s ease-in forwards 13s;
  }

  h4,
  h5 {
    margin: 12px;
    animation: textSlideRight 1s ease-in forwards 14s;
  }

  h4::after {
    opacity: 0;
    animation: textSlideRight 1s ease-in forwards 18s;
  }

  @keyframes draw {
    0% {
      stroke-dashoffset: var(--line-length);
    }

    25% {
      stroke-dashoffset: 0;
    }

    75% {
      stroke-dashoffset: 0;
    }

    100% {
      stroke-dashoffset: var(--line-length);
    }
  }

  @keyframes drawLine {
    0% {
      stroke-dashoffset: var(--line-length);
    }

    100% {
      stroke-dashoffset: 0;
    }
  }


  line {
    stroke-dasharray: var(--line-length);
    stroke-dashoffset: var(--line-length);
    animation: draw 8s ease forwards;
  }

  @keyframes scaleDown {
    0% {
      transform: scale(calc(var(--svg-scale) * 0.8));
    }

    25% {
      transform: scale(calc(var(--svg-scale) * 0.4));
    }

    50% {
      transform: scale(calc(var(--svg-scale) * 0.4)) translate(0px, var(--translate-y));
    }

    100% {
      transform: scale(calc(var(--svg-scale) * 0.4)) translate(var(--translate-x), var(--translate-y));
    }
  }

  svg#firstsvg {
    animation: scaleDown 6s ease-in-out forwards;
    animation-delay: 4s;
    --translate-x: 0px;
    --translate-y: 0px;
  }

  #secondline {
    stroke-dasharray: var(--line-length);
    stroke-dashoffset: var(--line-length);
    animation: drawLine 2s ease forwards;
  }

  @keyframes fadeIn {
    0% {
      fill-opacity: 0;
    }

    50% {
      fill-opacity: 0.3;
    }

    75% {
      fill-opacity: 0.5;
    }

    100% {
      fill-opacity: 0;
    }
  }

  .face {
    fill-opacity: 0;
    animation: fadeIn 8s ease forwards;
  }

